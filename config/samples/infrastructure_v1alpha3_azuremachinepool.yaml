---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachinePool
metadata:
  name: capi-quickstart-workerpool
  labels:
    cluster.x-k8s.io/cluster-name: capi-quickstart
    # Labels beyond this point are for example purposes,
    # feel free to add more or change with something more meaningful.
    # Sync these values with spec.selector.matchLabels and spec.template.metadata.labels.
    nodepool: nodepool-0
spec:
  clusterName: "capi-quickstart"
  replicas: 1
  selector: {}
  template:
    spec:
      clusterName: "capi-quickstart"
      version: v1.15.4
      bootstrap:
        configRef:
          name: capi-quickstart-workerpool
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
          kind: KubeadmConfig
      infrastructureRef:
        name: capi-quickstart-workerpool
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: AzureMachinePool
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureMachinePool
metadata:
  name: capi-quickstart-workerpool
spec:
  resourceGroup:
    name: capi-quickstart
    subscriptionID: ${AZURE_SUBSCRIPTION_ID}
    region: southcentralus
  name: capi-quickstart-workerpool
  sku: Standard_DS4_v2
  sshPublicKey: ${SSH_PUBLIC_KEY}
  subnet: 10.200.0.0/16
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: capi-quickstart-workerpool
spec:
  # For more information about these values,
  # refer to the Kubeadm Bootstrap Provider documentation.
  joinConfiguration:
    nodeRegistration:
      criSocket: unix:///var/run/containerd/containerd.sock
      kubeletExtraArgs:
        cloud-config: /etc/kubernetes/azure.json
        cloud-provider: azure
  preKubeadmCommands:
  - bash -c /tmp/bootstrap
  files:
  - path: /tmp/bootstrap
    owner: "root:root"
    permissions: "0744"
    content: |
      #!/bin/bash

      set -euxo pipefail

      function containerd_prereq() {
        cat > /etc/modules-load.d/containerd.conf <<EOF
      overlay
      br_netfilter
      EOF

        modprobe overlay
        modprobe br_netfilter

        # Setup required sysctl params, these persist across reboots.
        cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

        sysctl --system
      }

      function containerd_install() {
        # Install containerd
        ## Set up the repository
        ### Install packages to allow apt to use a repository over HTTPS
        apt-get update && apt-get install -y apt-transport-https ca-certificates curl software-properties-common

        ### Add Dockerâ€™s official GPG key
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

        ### Add Docker apt repository.
        add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) \
          stable"

        ## Install containerd
        apt-get update && apt-get install -y containerd.io

        # Configure containerd
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml

        # Restart containerd
        systemctl restart containerd
      }

      function kubernetes_install() {
        apt-get update && apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-xenial main
      EOF
        apt-get update
        apt-get install -y kubelet=1.15.4-00 kubeadm=1.15.4-00 kubectl=1.15.4-00
        apt-mark hold kubelet kubeadm kubectl
      }

      containerd_prereq
      containerd_install
      kubernetes_install
  - path: /etc/kubernetes/azure.json
    owner: "root:root"
    permissions: "0644"
    content: |
      {
        "cloud": "AzurePublicCloud",
        "tenantID": "${AZURE_TENANT_ID}",
        "subscriptionID": "${AZURE_SUBSCRIPTION_ID}",
        "resourceGroup": "capi-quickstart",
        "securityGroupName": "cluster",
        "location": "southcentralus",
        "vmType": "vmss",
        "vnetName": "capi-quickstart",
        "vnetResourceGroup": "capi-quickstart",
        "subnetName": "cluster",
        "routeTableName": "cluster",
        "userAssignedID": "capi-quickstart",
        "loadBalancerSku": "Standard",
        "maximumLoadBalancerRuleCount": 250,
        "useManagedIdentityExtension": true,
        "useInstanceMetadata": true
      }
